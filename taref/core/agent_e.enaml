# -*- coding: utf-8 -*-
"""
Created on Mon Jul 13 20:55:47 2015

@author: thomasaref
"""

from enaml.widgets.api import ( Window, ScrollArea, Field, PushButton, ToolBar, Action, MainWindow,
    Container, MultilineField, DockPane, HGroup, VGroup, GroupBox, Label, ObjectCombo, Form)
from enaml.layout.geometry import Pos, Rect, Size
from enaml.core.api import Looper, Conditional
from atom.api import List, Typed, cached_property
from enaml.core.declarative import d_
from taref.core.shower_backbone import get_view_window
#from e_Plotter import PlotWindow
#from log_e import LogWindow, LogPane
from collections import OrderedDict
from taref.core.instrview_e import InstrHolder
from taref.core.log import log_debug
from taref.core.fundcore_e import AgentWindow, aHGroup
from taref.core.atom_extension import get_all_tags, get_type

enamldef AutoAgentView(AgentWindow):
    """default view for an agent based on dynamic templating"""
    Container:
        ScrollArea:
            attr vmodel=parent.parent.agent
            InstrHolder:
                pass

class ShowWindow(MainWindow):
    """adds a list of other windows to a MainWindow and a property that determines if all are visible"""
    @cached_property
    def window_dict(self):
        return dict([(w.name, w) for w in self.windows])

    @cached_property
    def all_wins(self):
        return [w for w in self.windows if w!=self]

    @cached_property
    def all_win_dict(self):
        self.get_member("all_wins").reset(self)
        return dict([(w.name, w) for w in self.all_wins if w != self and w.name not in ("ipython", "log", "run_code")])

    @cached_property
    def agent_win_dict(self):
        self.get_member("all_win_dict").reset(self)
        return OrderedDict([(name, self.all_win_dict.get(name, None)) for name in getattr(self.chief_cls, "agent_dict", {})])

    @cached_property
    def other_win_dict(self):
        self.get_member("all_win_dict").reset(self)
        self.get_member("agent_win_dict").reset(self)
        return OrderedDict([(name, self.all_win_dict[name]) for name in self.all_win_dict if name not in self.agent_win_dict])

    def show_and_send_to_front(self, name, win):
        if win is None:
            agent=self.chief_cls.agent_dict.get(name, None)
            win=get_view_window(agent, AutoAgentView(agent=agent))
        win.show()
        win.send_to_front()

enamldef CoreWindow(ShowWindow): sv:
    """extends showWindow to close all windows when the core is closed and define chief_cls"""
    attr chief_cls
    name="show_control"
    initial_position=(0,0)
    closed ::
        sv.get_member("all_wins").reset(sv)
        for w in sv.all_wins:
            w.close()
            w.destroy()

enamldef WindowToolBar(ToolBar):
    """a toolbar that lists all windows and links an action to showing them"""
    attr boss_window=parent
    attr win_dict << boss_window.all_win_dict
    alias top_action
    dock_area="left"
    #orientation="vertical"
    Action: top_action:
        text="Windows"
    Action:
        separator=True
    Looper:
        iterable << win_dict
        Action:
            text = loop_item
            tool_tip = "Show window: {0}".format(loop_item)
            triggered::
                boss_window.show_and_send_to_front(loop_item, win_dict[loop_item])

enamldef TopToolBar(ToolBar):
    dock_area="top"
    Conditional:
        condition = hasattr(chief_cls, "interact")
        Action:
            text="Log"
            triggered::
                chief_cls.interact.log_window.show()
                chief_cls.interact.log_window.send_to_front()
            tool_tip = "Show log"
        Action:
            text="Interactive"
            triggered::
                chief_cls.interact.interactive_window.show()
                chief_cls.interact.interactive_window.send_to_front()
            tool_tip = "Show interactive window"
        Action:
            text="Code"
            triggered::
                chief_cls.interact.code_window.show()
                chief_cls.interact.code_window.send_to_front()
            tool_tip = "Show code window"

#from taref.core.plotter import Plotter
#from numpy import arange, array, ndarray
#from atom.api import Float, Int, List, ContainerList, Coerced, Property
#def get_plottables(agent):
#    plottables=get_all_tags(agent, "plot", True)
#    if plottables!=[]:
#        return plottables
#    plottables=[param for param in agent.main_params if get_type(agent, param) in (Float, Int, List, ContainerList, Coerced, Property)]
#    return plottables
#
#enamldef PlotPane(DockPane):
#    attr cw=parent
#    attr plot_dict=cw.chief_cls.plot_dict
#    dock_area="bottom"
#    Form:
#        Label:
#            text="X agent:"
#        Label:
#            text="X var:"
#        aHGroup:
#            ObjectCombo: x_agent:
#                items << cw.agent_win_dict.keys()
#        aHGroup:
#            ObjectCombo:
#                items << get_plottables(cw.chief_cls.agent_dict[x_agent.selected])
#                selected = None# << items[0]
#        Label:
#            text="Y agent:"
#        Label:
#            text="Y var:"
#        aHGroup:
#            ObjectCombo: y_agent:
#                items << cw.agent_win_dict.keys()
#        aHGroup:
#            ObjectCombo: yvar:
#                items << get_plottables(cw.chief_cls.agent_dict[y_agent.selected])
#                selected << items[0]
#        Label:
#            text="Z agent:"
#        Label:
#            text="Z var:"
#        aHGroup:
#            ObjectCombo: z_agent:
#                items << cw.agent_win_dict.keys()
#        aHGroup:
#            ObjectCombo: z_var:
#                items << get_plottables(cw.chief_cls.agent_dict[z_agent.selected])
#                selected << items[0]
#        ObjectCombo: plt_type:
#            items = Plotter.plot_type_list #["Line plot", "Scatter plot", "Colormap", "Polygon", "Text"]
#        Label:
#            text="Plot name"
#        Field: plt_name:
#            text = Plotter.base_name
#        Label:
#            text="Data name"
#        Field: dta_name:
#            text << "{0}_{1}".format(z_agent.selected, z_var.selected)
#        PushButton:
#            text="new plot"
#            clicked ::
#                a=Plotter(name=plt_name.text)
#                #a.draw()
#                cw.get_member("agent_win_dict").reset(cw)
#                cw.show_and_send_to_front(a.name, cw.agent_win_dict[a.name])
#
#                #a.plot_type_map[plt_type.selected]("blah", ys[0], label="1", color="red")
#
#        PushButton:
#                text="add plot"
#                clicked ::
#                        a=Plotter(name=plt_name.text)
#                        x = arange(3)+3
#                        ys = array([x + i for i in arange(5)])
#                        data=[list(zip(x, y)) for y in ys]
#                        a.plot_type_map[plt_type.selected](dta_name, ys[0], label="1", color="red")
#                        a.scatter_plot("bob", x-4, ys[0]+10, label="2", color="blue")
#
#                        a.line_plot("bill", x-2, ys[0]+6, ys[1]+6, color="green", label="bob")#, color=("red", "blue", "green"))
#                        a.axe.legend()
#                        a.draw()
#                        #cw.chief_cls.plot_dict[a.name]=a
#                        cw.get_member("agent_win_dict").reset(cw)
#                        cw.show_and_send_to_front(a.name, cw.agent_win_dict[a.name])

enamldef CoreView(CoreWindow): cv:
    """the most basic view controller of a collection of Atoms without a chief"""
    activated ::
        print chief_cls
        if hasattr(chief_cls, "activated"):
            chief_cls.activated()
    TopToolBar: tb:
        Action:
            text = "test"
    WindowToolBar:
        top_action.text="Agents"
        win_dict<<cv.agent_win_dict
    WindowToolBar:
        top_action.text="Other Windows"
        win_dict<<cv.other_win_dict


enamldef BasicView(CoreView):
    """the most basic view controller of a collection of Atoms without a chief"""
    title="Show Control"
    Conditional:
        condition = getattr(chief_cls, "run_func_dict", {}) != {}
        VGroup:
            Looper:
                iterable=chief_cls.run_func_dict.keys()
                PushButton:
                    text = loop_item
                    clicked ::
                        #chief_cls.run_func_dict[loop_item]()
                        chief_cls.add_thread(loop_item+"_thread", chief_cls.run_func_dict[loop_item])
                    enabled << chief_cls.busy != True #getattr(agent.thread, "name", None) != loop_item #busy != True

            PushButton:
                text = "Test"
                clicked ::
                    log_debug(sv.windows)
                    print set([win.name for win in sv.all_wins]
                    ).union(chief_cls.agent_dict.keys())
                    #print sv.agent_wins
                    print sv.all_wins
                    #print sv.other_wins
                    #chief.run_all()
                tool_tip = "test button"




