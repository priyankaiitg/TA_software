# -*- coding: utf-8 -*-
"""
Created on Sun Jan 24 16:31:00 2016

@author: thomasaref
"""

from taref.core.log import log_debug
from enaml.core.api import Looper, Conditional
from enaml.widgets.api import (Window, Container, HGroup, Label, CheckBox, Slider,
                               VGroup, ScrollArea, SpinBox, Form, Field, MultilineField,
                               PushButton, ObjectCombo, GroupBox)
from enaml.layout.api import spacer
from taref.core.atom_extension import get_tag, get_type, get_map, get_main_params
from taref.core.callable import get_run_params
from taref.core.fundcore_e import UnitIntField, UnitSpinBox, UnitFloatField, UnitComplexField, aHGroup, aVGroup, CheckButton
from taref.core.universal import msg
from atom.api import Property, ReadOnly
from taref.physics.units import unitless
from enaml.stdlib.slider_transform import FloatTransform

def spacer_eval(vmodel, vname):
     """useful function for modifying spacer of aHGroup"""
     no_spacer = get_tag(vmodel, vname, "no_spacer", False)
     if no_spacer:
         return None
     return spacer

enamldef Var(aHGroup):
    """Var base that adds label and spacer"""
    attr vmodel=parent.vmodel
    attr vname=parent.vname
    attr vvalue:=getattr(vmodel, vname)
    trailing_spacer=spacer_eval(vmodel, vname)
    alias label : lbl
    Label: lbl:
        text=vname
        tool_tip=get_tag(vmodel, vname, "label", vname)+": "+get_tag(vmodel, vname, "desc", "")

enamldef VarVGroup(VGroup):
    attr vmodel=parent.vmodel


####################### Just unicode showing of unhandled types ############################
enamldef LabelExt(Label):
    text << msg(parent.vmodel, parent.vname, parent.vvalue)

enamldef LabelVar(Var):
    alias ext
    LabelExt: ext:
        pass

enamldef ReadOnlyExt(Label):
    text << unicode(parent.vvalue)

enamldef ReadOnlyVar(Var):
    alias ext
    ReadOnlyExt: ext:
        pass

def rdonly(vmodel, vname):
    member=vmodel.get_member(vname)
    if isinstance(member, ReadOnly):
        return True
    elif isinstance(member, Property):
        if member.fset is None:
            return True
    return get_tag(vmodel, vname, "read_only", False)

#####################  STRINGS #####################
enamldef FieldExt(Field):
    """extends Var for string types"""
    text:=parent.vvalue
    read_only=rdonly(parent.vmodel, parent.vname)

enamldef FieldVar(Var):
    alias ext
    FieldExt: ext:
        pass

enamldef MultilineExt(MultilineField):
    """extends Var for string types"""
    text:=parent.vvalue
    read_only=rdonly(parent.vmodel, parent.vname)

enamldef MultilineVar(Var):
    alias ext
    MultilineExt: ext:
        pass

################### BOOLEANS #########################
#
#enamldef BoolExt2(PushButton):
#    attr read_only : bool = rdonly(parent.vmodel, parent.vname)
#    text << unicode(parent.vvalue)
#    checkable = True
#    checked << parent.vvalue
#    clicked ::
#        if not read_only:
#            parent.vvalue=self.checked
#        else:
#            self.checked=parent.vvalue

enamldef BoolExt(CheckButton):
    read_only = rdonly(parent.vmodel, parent.vname)
    value := parent.vvalue
    mapping = get_tag(parent.vmodel, parent.vname, "mapping", {})
    #True_text=get_map(parent.vmodel, parent.vname, True)
    #False_text=get_map(parent.vmodel, parent.vname, False)

enamldef BoolVar(Var):
    alias ext
    BoolExt: ext:
        pass

enamldef CheckBoxExt(CheckBox):
    """boolean shown as CheckBox with extensions for read_only option"""
    attr read_only : bool = rdonly(parent.vmodel, parent.vname)
    checked << parent.vvalue
    clicked ::
        if not read_only:
            parent.vvalue=self.checked
        else:
            self.checked=parent.vvalue

enamldef CheckBoxVar(Var):
    alias ext
    CheckBoxExt: ext: pass

##################### INTS ##############################
def None_passer(value, coercer=float):
    if value is None:
        return value
    return coercer(value)

enamldef UnitIntFieldExt(UnitIntField):
    """integer shown as IntField with units"""
    uvalue:=parent.vvalue
    unit=get_tag(parent.vmodel, parent.vname, "unit", unitless)
    show_uvalue=get_tag(parent.vmodel, parent.vname, "show_value", unit!=unitless)
    minimum=None_passer(get_tag(parent.vmodel, parent.vname, 'low'), int)
    maximum=None_passer(get_tag(parent.vmodel, parent.vname, 'high'), int)
    #display_unit=get_tag(parent.vmodel, parent.vname, "display_unit", None)
    read_only=rdonly(parent.parent.vmodel, parent.parent.vname)

enamldef UnitIntVar(Var):
    alias ext
    UnitIntFieldExt: ext:
        pass

enamldef UnitSpinBoxExt(UnitSpinBox):
    """integer shown as SpinBox with units"""
    uvalue:=parent.vvalue
    unit=get_tag(parent.vmodel, parent.vname, "unit", unitless)
    show_uvalue=get_tag(parent.vmodel, parent.vname, "show_value", unit != unitless)
    minimum=int(get_tag(parent.parent.vmodel, parent.parent.vname, 'low', -2147483648))
    maximum=int(get_tag(parent.parent.vmodel, parent.parent.vname, 'high', 2147483647))

enamldef UnitSpinBoxVar(Var):
    alias ext
    UnitSpinBoxExt: ext:
        pass

##################### FLOATS ####################################################
enamldef UnitFloatExt(UnitFloatField):
    """extends Var for float types"""
    uvalue:=parent.vvalue
    unit=get_tag(parent.vmodel, parent.vname, "unit", unitless)
    show_uvalue=get_tag(parent.vmodel, parent.vname, "show_value", unit != unitless)
    minimum=None_passer(get_tag(parent.vmodel, parent.vname, 'low'), float)
    maximum=None_passer(get_tag(parent.vmodel, parent.vname, 'high'), float)
    read_only=rdonly(parent.parent.vmodel, parent.parent.vname)

enamldef UnitFloatVar(Var):
    alias ext
    UnitFloatExt: ext:
        pass

enamldef UnitComplexExt(UnitComplexField):
    """extends Var for complex types"""
    uvalue:=parent.vvalue
    unit=get_tag(parent.vmodel, parent.vname, "unit", unitless)
    show_uvalue=get_tag(parent.vmodel, parent.vname, "show_value", unit != unitless)
    minimum=None_passer(get_tag(parent.vmodel, parent.vname, 'low'), float)
    maximum=None_passer(get_tag(parent.vmodel, parent.vname, 'high'), float)
    read_only=rdonly(parent.parent.vmodel, parent.parent.vname)

enamldef UnitComplexVar(Var):
    alias ext
    UnitComplexExt: ext:
        pass
################### RANGES #################################
def get_minimum(obj, param):
    low=get_tag(obj, param, "low")
    if low is not None:
        return low
    return obj.get_member(param).validate_mode[1][0]

def get_maximum(obj, param):
    high=get_tag(obj, param, "high")
    if high is not None:
        return high
    return obj.get_member(param).validate_mode[1][1]

enamldef UnitRangeExt(UnitIntField): uif:
    """a Range control with units"""
    uvalue:=parent.vvalue
    unit=get_tag(parent.vmodel, parent.vname, "unit", unitless)
    show_uvalue=get_tag(parent.vmodel, parent.vname, "show_value", unit != unitless)
    minimum = get_minimum(parent.vmodel, parent.vname)
    maximum = get_maximum(parent.vmodel, parent.vname)
    attr tracking : bool = get_tag(parent.vmodel, parent.vname, "tracking", False)
    Label: min_lbl:
        text << str(int(sel_slider.minimum))
    Slider: sel_slider:
        minimum = uif.minimum
        maximum = uif.maximum
        value :=uif.uvalue
        tracking = uif.tracking
    Label: max_lbl:
        text << str(int(sel_slider.maximum))

enamldef UnitRangeVar(Var):
    alias ext
    UnitRangeExt: ext:
        pass

enamldef UnitFloatRangeExt(UnitFloatField): uff:
    """ A form control template specialization for Float members"""
    uvalue:=parent.vvalue
    unit=get_tag(parent.vmodel, parent.vname, "unit", unitless)
    show_uvalue=get_tag(parent.vmodel, parent.vname, "show_value", unit != unitless)
    minimum = get_minimum(parent.vmodel, parent.vname)
    maximum = get_maximum(parent.vmodel, parent.vname)
    attr tracking : bool = get_tag(parent.vmodel, parent.vname, "tracking", False)
    attr precision : int = get_tag(parent.vmodel, parent.vname, 'precision', 1000)
    Label: min_lbl:
            text << str(ft.minimum)
    Slider: sel_slider:
        tracking = uff.tracking #get_tag(vmodel, vname, "tracking", False)
        FloatTransform: ft:
            minimum = uff.minimum
            maximum =  uff.maximum
            value := uff.uvalue
            precision= uff.precision
    Label: max_lbl:
        text << str(ft.maximum)

enamldef UnitFloatRangeVar(Var):
    alias ext
    UnitFloatRangeExt: ext:
        pass

################### LISTS #####################################
enamldef ListScrollExt(ScrollArea):
    """scroll area list"""
    constraints = [height==200]

    Form:
        Looper:
            iterable := vvalue
            PushButton:
                text = '>'
                constraints = [width == 10, height == 15]
                clicked :: print loop_index #open_menu(loop_item)
            Label:
                text = unicode(loop_item)
enamldef ListScrollVar(Var):
    ListScrollExt: pass

######################## ENUM ################################
def check_map(obj, name):
    """checks if Enum has a mapping"""
    mapping=get_tag(obj, name, "mapping")
    if mapping is None:
        mapping_name=name+"_mapping"
        return hasattr(obj, mapping_name)
    return True

enamldef EnumExt(aHGroup):
    """extends Var for Enum"""
    alias object_combo
    alias label
    ObjectCombo: object_combo:
        items = list(parent.parent.vmodel.get_member(parent.parent.vname).items)
        selected := parent.parent.vvalue
    Label: label:
        visible=get_tag(parent.parent.vmodel, parent.parent.vname, "show_value", True) and check_map(parent.parent.vmodel, parent.parent.vname)
        text <<  unicode(get_map(parent.parent.vmodel, parent.parent.vname, parent.parent.vvalue))

enamldef EnumVar(Var):
    alias ext
    EnumExt: ext:
        pass


################test window##########################
if __name__=="__main__":
    from atom.api import observe, Bool, Int, Typed, List, Coerced, Enum, Callable, Float, Str, Unicode, Range, FloatRange, Instance, Atom, cached_property, Property
    from taref.core.atom_extension import tag_Property, get_map, reset_property
    class Test(Atom):
        t_field=Unicode("unicode").tag(desc="FieldVar for Unicode and String")
        t_str=Str("str").tag(desc="MultilineVar for Unicode and Str")

        def _observe_t_field(self, change):
            self.get_member("t_readonly_field").reset(self)

        @tag_Property(desc="demonstrates readonly version of field for readonly property")
        def t_readonly_field(self):
            return self.t_field


        t_bool=Bool(True).tag(desc="default boolean template", mapping={True : "On", False : "Off"})

        def _observe_t_bool(self, change):
            reset_property(self, "t_readonly_bool")

        @tag_Property(desc="demonstrates readonly version of bool for readonly property")
        def t_readonly_bool(self):
            return self.t_bool


        t_int=Int(10).tag(show_value=True, low=20, high=50, desc="UnitIntVar with unit, unit_factor and show_value")
        t_range=Range(0,5,1)
        def _observe_t_int(self, change):
            self.get_member("t_readonly_int").reset(self)

        @tag_Property(desc="demonstrates readonly version of int for readonly property")
        def t_readonly_int(self):
            return self.t_int

        t_float=Float(1).tag(desc="UnitFloatVar for floats with unit, unit_factor, show_value, low and high tags",
                            show_value=True, low=3.0, high=5.0)
        t_floatrange=FloatRange(0.0, 5.0, 1.0).tag(tracking=True)

        def _observe_t_float(self, change):
            self.get_member("t_readonly_float").reset(self)

        @tag_Property(desc="demonstrates readonly version of float for readonly property")
        def t_readonly_float(self):
            return self.t_float

        t_list=List(default=[1,2,3])
        t_enum=Enum("a", "b", "c")

        @tag_Property(desc="mapping of t_enum displayed as Label")
        def t_enum_mapping(self):
            return dict(a=1, b=2, c=3)

        @observe("t_field", "t_str", "t_bool", "t_int", "t_spinbox", "t_float", "t_range", "t_floatrange", "t_enum")
        def report_change(self, change):
            if not get_tag(self, change["name"], "tracking", False):
                log_debug(change)
    t=Test()

enamldef Main(Window):
    attr agent = t
    Container:
        ScrollArea:
            VGroup:
                attr vmodel = agent
                BoolVar:
                    vname="t_bool"
                BoolVar:
                    vname="t_readonly_bool"

                FieldVar:
                    vname="t_field"
                MultilineVar:
                    vname="t_str"
                FieldVar:
                    vname="t_readonly_field"
                MultilineVar:
                    vname="t_readonly_field"



                UnitIntVar:
                    vname="t_int"
                UnitIntVar:
                    vname="t_readonly_int"
                UnitRangeVar:
                    vname="t_int"
                UnitSpinBoxVar:
                    vname="t_int"
                UnitRangeVar:
                    vname="t_range"


                UnitFloatVar:
                    vname="t_float"
                UnitFloatRangeVar:
                    vname="t_float"
                    label.tool_tip="Can use FloatRange with Float if tags low and high are specified"
                UnitFloatRangeVar:
                    vname="t_floatrange"

                ListScrollVar:
                    vname="t_list"
                EnumVar:
                    vname="t_enum"
                LabelVar:
                    vname="t_enum_mapping"

