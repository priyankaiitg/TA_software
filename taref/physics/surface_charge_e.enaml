# -*- coding: utf-8 -*-
"""
Created on Tue Jan  5 01:08:32 2016

@author: thomasaref
"""

from enaml.widgets.api import MainWindow, VGroup, Form, Label, ObjectCombo, Notebook, Page, GroupBox, DockArea, DockItem, Container, PushButton
from enaml.core.api import Looper
from taref.core.fundcore_e import UnitIntField, aHGroup, aWindow, UnitFloatField, AgentWindow
from taref.core.var_e import EnumVar, UnitFloatVar, UnitIntVar
from taref.core.instrview_e import DynVar, AgentLooper, AgentVGroup
from taref.core.agent_e import BasicView
from enaml.layout.api import HSplitLayout, VSplitLayout, TabLayout, InsertItem, hbox, vbox, spacer

enamldef MaterialDockItem(DockItem):
    name = 'material'
    title = 'Material Properties'
    AgentVGroup:
        vmodel = agent
        iterable=("material", "vf", "Dvv", "K2", "epsinf")

enamldef FingerDockItem(DockItem):
    name="finger"
    title = "Finger properties"
    AgentVGroup:
        vmodel = agent
        iterable=("ft", "eta", "ft_mult", "Ct_mult", "a", "g")#,
#                  "f", "f0", "lbda", "lbda0", "k", "k0")

enamldef FrequencyDockItem(DockItem):
    name="frequency"
    title = "Frequency"
    AgentVGroup:
        vmodel = agent
        iterable=("f", "f0", "lbda", "lbda0", "k", "k0")

enamldef AlphaDockItem(DockItem):
    name="alpha"
    title = "FT Surface charge"
    AgentVGroup:
        vmodel = agent
        iterable=("alpha0", "alpha", "fs", "m", "s", "p")

enamldef PlotDockItem(DockItem):
    name="plots"
    title = "Plots"
    VGroup:
        Looper:
            iterable=agent.plot_func_dict.keys()
            PushButton:
                text = loop_item
                clicked ::
                    agent.add_thread(loop_item+"_thread", **agent.plot_func_dict[loop_item])
                enabled << agent.busy != True #getattr(agent.thread, "name", None) != loop_item #busy != True

enamldef NumericDockItem(DockItem):
    name="numeric"
    title = "Numeric controls"
    aHGroup:
        AgentVGroup:
            vmodel = agent
            iterable=("N_fixed", "fixed_freq_min", "fixed_freq_max", "fixed_update")
            PushButton:
                clicked :: agent.fixed_reset()
                text = "fixed reset"
        AgentVGroup:
            vmodel = agent
            iterable=("lgf1",)
        AgentVGroup:
            vmodel = agent
            iterable=("lgf2",)

enamldef SurfaceChargeDockArea(DockArea):
    layout = VSplitLayout(HSplitLayout('plots', 'material', 'finger', "frequency", "alpha"), "numeric")

    MaterialDockItem:
        pass
    FingerDockItem:
        pass
    FrequencyDockItem:
        pass
    NumericDockItem:
        pass
    AlphaDockItem:
        pass
    PlotDockItem:
        pass

enamldef SurfaceChargeView(AgentWindow):
    VGroup:
        SurfaceChargeDockArea: nb:
            pass


#enamldef PlotView(CoreView):
#    """the most basic view controller of a collection of Atoms without a chief"""
#    title="Show Control"
#    Conditional:
#        condition = getattr(chief_cls, "run_func_dict", {}) != {}
#        VGroup:
#            Looper:
#                iterable=chief_cls.run_func_dict.keys()
#                PushButton:
#                    text = loop_item
#                    clicked :: chief_cls.run_func_dict[loop_item]().show()
            #PushButton:
            #    text = "Test"
            #    clicked ::
            #        log_debug(sv.windows)
            #        print set([win.name for win in sv.all_wins]
            #        ).union(chief_cls.agent_dict.keys())
            #        #print sv.agent_wins
            #        print sv.all_wins
            #        #print sv.other_wins
            #       #chief.run_all()
            #    tool_tip = "test button"

